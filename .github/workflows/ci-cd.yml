name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'sprint/**' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Run integration tests
      run: |
        cd test
        chmod +x *.sh
        ./simple_validation.sh
        
    - name: Check documentation
      run: cargo doc --no-deps --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --all-features

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release
      run: cargo build --release --verbose
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docsearch-binary
        path: target/release/docsearch
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i "s|docsearch:latest|ghcr.io/${{ github.repository }}:develop|g" k8s/deployment.yaml
        
        # Apply secrets (if not already present)
        kubectl apply -f docker/secrets/k8s-secrets.yaml --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy application
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/docsearch -n default --timeout=600s
        
        # Verify deployment
        kubectl get pods -l app=docsearch -n default
        
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=docsearch -n default --timeout=300s
        
        # Get service URL
        STAGING_URL=$(kubectl get ingress docsearch-internal-ingress -o jsonpath='{.spec.rules[0].host}')
        
        # Run health check
        curl -f "http://${STAGING_URL}/health" || exit 1
        echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: Deploy to production
      run: |
        # Extract version from release tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update image tag in deployment
        sed -i "s|docsearch:latest|ghcr.io/${{ github.repository }}:${VERSION}|g" k8s/deployment.yaml
        
        # Apply secrets (if not already present)
        kubectl apply -f docker/secrets/k8s-secrets.yaml --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy application
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/docsearch -n default --timeout=600s
        
        # Verify deployment
        kubectl get pods -l app=docsearch -n default
        
    - name: Run production smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=docsearch -n default --timeout=300s
        
        # Get service URL (assuming production ingress is configured)
        PROD_URL=$(kubectl get ingress docsearch-ingress -o jsonpath='{.spec.rules[0].host}')
        
        # Run health check
        curl -f "https://${PROD_URL}/health" || exit 1
        echo "Production deployment successful!"
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "ðŸš€ Docsearch ${{ github.event.release.tag_name }} deployed to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
